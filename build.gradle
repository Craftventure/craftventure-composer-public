buildscript {
    ext.kotlin_version = '1.3.50'

    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
    id "org.jetbrains.kotlin.jvm" version "1.3.50"
    id "org.jetbrains.kotlin.kapt" version "1.3.50"
    id "org.openjfx.javafxplugin" version "0.0.8"
}

group 'net.craftventure'
version '1.0-SNAPSHOT'
//plugins {
//    id 'kotlin'
//    id 'org.openjfx.javafxplugin' version '0.0.8'
//}
//apply plugin: 'kotlin'
//apply plugin: 'org.openjfx.javafxplugin'

javafx {
    version = "13"
//    version = "11.0.2"
    modules = [ 'javafx.base', 'javafx.graphics', 'javafx.controls', 'javafx.fxml', 'javafx.media' ]
}

repositories {
    mavenCentral()
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    compile 'no.tornado:tornadofx:1.7.14'
    compile 'com.jfoenix:jfoenix:8.0.1'
    compile 'io.reactivex.rxjava2:rxjava:2.1.12'
    compile 'io.reactivex.rxjava2:rxkotlin:2.2.0'
//    compile 'io.reactivex.rxjava2:rxjavafx:2.0.2'
    compile 'com.jakewharton.rxrelay2:rxrelay:2.0.0'
//    compile 'com.github.thomasnield:rxkotlinfx:0.0.2'
    compile 'org.apache.commons:commons-text:1.2'
    compile 'org.apache.commons:commons-math3:3.6.1'
    compile 'com.google.code.gson:gson:2.8.2'

}

task fatJar(type: Jar) {
    manifest {
        attributes 'Implementation-Title': 'Craftventure Composer',
                'Implementation-Version': version,
                'Main-Class': 'net.craftventure.composer.App'
    }
    println jar.path
    if (rootProject.properties.containsKey("outputlocation") && rootProject.properties.containsKey("outputfilename") &&
            outputlocation != null && outputfilename != null) {
        archiveName = outputfilename
    } else
        baseName = project.name + '-all'

    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

tasks.withType(Jar) {
    if (rootProject.properties.containsKey("outputlocation") && rootProject.properties.containsKey("outputfilename") &&
            outputlocation != null && outputfilename != null) {
        destinationDir = new File(outputlocation)
    }
}

sourceCompatibility = 1.8

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}